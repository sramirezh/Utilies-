#!/usr/bin/env python2
# -*- coding: utf-8 -*-
"""
Created on Mon Jul  2 13:47:42 2018

@author: sr802
"""


import numpy as np
import pandas as pd
import argparse
import os
import sys


sys.path.append(os.path.join(os.path.dirname(__file__), '../../../')) #This falls into Utilities path
import Lammps.core_functions as cf
try:
    import matplotlib
    matplotlib.use('agg')
    import matplotlib.pyplot as plt
except ImportError as err:
    print(err)



"""
*******************************************************************************
Functions
*******************************************************************************
"""
def build_data(files):
    profiles=[]
    for file_name in files:
        profiles.append(profile(file_name))

    return profiles


def get_name(file_name):
    path=os.path.abspath(file_name).split("/")
    typ=get_type(path[-1])
    box=path[-3]
    return typ,box


def get_type(name):
    """
    Identifies if they are solutes, solvents or the solution by the name
    *_f.dat is solvent
    *_s.dat is solutes
    *_sol.dat is solution
    """

    identifier=name.split("_")[-1].split('.')[-2]

    dict = {'f': 'solvent', 's': 'solute', 'sol': 'solution'}

    return dict[identifier]



def plot_property(profiles, property_name):
    """
    Plot a property from several data profiles vs the normalized z coordinate
    Args:
        profiles are a defined by the class profile.
        property_name is a name that should be in the data for all the profiles.

    Returns:
        fig,ax to be handled and later customized.

    """

    fig,ax=plt.subplots()

    for prof in profiles:

        index=cf.parameter_finder(prof.column_names, property_name)

        name="%s_%s"%(prof.box,prof.name)
        ax.plot(prof.data[:,1]/np.max(prof.data[:,1]),prof.data[:,index], label=name)

    return fig,ax






"""
*******************************************************************************
Class definition
*******************************************************************************
"""


class profile(object):
    """
    Any sort of profile generated by the chunks
    """

    def __init__(self,file_name):
        self.path=os.path.abspath(file_name).split("/")
        self.name, self.box = get_name(file_name)
        data=cf.read_data_file(file_name)
        self.data=data.values
        self.column_names=list(data.columns.values)


    def get_property(self,name):
        """
        function to get the specific property
        """
        index=cf.parameter_finder(self.column_names,name)[0]
        prop=self.data(index)

        return prop



"""
*******************************************************************************
Main
*******************************************************************************
"""
parser = argparse.ArgumentParser(description='This script analyses the velocity profiles of the polymer',formatter_class=argparse.ArgumentDefaultsHelpFormatter)
parser.add_argument('file_name', metavar='InputFile',help='Input filename',nargs='+',type=lambda x: cf.is_valid_file(parser, x))
parser.add_argument('-properties', metavar='properties',help='Properties to plot', default="Vx",nargs='+',type=str)
args = parser.parse_args()
files=args.file_name
properties=args.properties

#Initializing the class
profiles=build_data(files)
Dict={'density':'$rho$','vx':'$V_x$'}


"""
*******************************************************************************
Plot
*******************************************************************************
"""

ymax_arr=[]
for parameter in properties:

    fig,ax=plot_property(profiles,parameter)
    ax.set_xlabel(r'$z/l_z$',fontsize=18)

    ylabel=Dict.get(parameter)
    if ylabel==None:
        ylabel=parameter

    ax.set_ylabel(r'%s'%ylabel,fontsize=18)

    ax.legend(loc=1)
    ax.tick_params(labelsize=18)

    ymin,ymax=plt.ylim()
    ax.set_ylim(ymin,ymax*1.2)  #To add 20% more in the y direction to fit the legend
    ax.set_xlim(0,1)
    plot_name="%s.pdf"%parameter
    plt.tight_layout()
    fig.savefig(plot_name)
    plt.close()
