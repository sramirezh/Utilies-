#!/usr/bin/env python2
# -*- coding: utf-8 -*-
"""
Created on Mon Jul  2 13:47:42 2018

@author: sr802
"""

from __future__ import division
import numpy as np
import pandas as pd
import argparse
import linecache
import os
import sys


sys.path.append(os.path.join(os.path.dirname(__file__), '../../../')) #This falls into Utilities path
from Lammps.linux import bash_command



try:
    import matplotlib
    matplotlib.use('agg')
    import matplotlib.pyplot as plt
except ImportError as err:
    print err



"""
*******************************************************************************
Functions
*******************************************************************************
"""

def is_valid_file(parser, arg):
    if not os.path.exists(arg):
        parser.error("The file %s does not exist!" % arg)
    else:
        return arg

def parameter_finder(List, String):
    """
    Finds a string on a List and returns the position on the list
    """
    cont=0
    indexes=[]
    for s in List:
        if String in s:
            indexes.append(cont)
        cont+=1
    length=len(indexes)
    if length>1: print "There were several ocurrences"
    if length==0: print "No ocurrences found"

    return indexes


def build_data(files):
    profiles=[]
    for file_name in files:
        profiles.append(profile(file_name))
        
    return profiles
        

def get_name(file_name):
    path=os.path.abspath(file_name).split("/")
    typ=get_type(path[-1]) 
    box=path[-3]
    return typ,box


def get_type(name):
    """
    Identifies if they are solutes, solvents or the solution by the name
    *_f.dat is solvent
    *_s.dat is solutes
    *_sol.dat is solution
    """
    
    identifier=name.split("_")[-1].split('.')[-2]
    
    dict = {'f': 'solvent', 's': 'solute', 'sol': 'solution'}
    
    return dict[identifier]

def get_columns(file_name):
    column_names=linecache.getline(file_name,3).split()
    column_names.remove("#")
    
    return column_names
    
    

def plot_property(property_name):
    
    fig,ax=plt.subplots()
    
    for prof in profiles:
        
        index=parameter_finder(prof.column_names, property_name)
        
        name="%s_%s"%(prof.box,prof.name)
        ax.plot(prof.data[:,1],prof.data[:,index], label=name)
        #x=np.array(ave_data[:,4]).astype(np.float)
        #y=np.array(ave_data[:,1]).astype(np.float)
    
    ax.legend()
    ax.set_xlabel(r'Z',fontsize=16)
    #ax.grid()
    ax.set_ylabel(r'Vx',fontsize=16)
    
    ax.tick_params(labelsize=14)
    
    #ax.plot(np.unique(x), np.poly1d(np.polyfit(x, y, 1))(np.unique(x)))
    
    #ax.axhline(y=0, xmin=0, xmax=1,ls=':',c='black')
    #ax.axvline(x=0, ymin=0, ymax=1,ls=':',c='black')
    plt.tight_layout()
    plot_name="%s.pdf"%property_name
    fig.savefig(plot_name)
    plt.close()
    
    

"""
*******************************************************************************
Class definition
*******************************************************************************
"""


class profile(object):
    """
    Any sort of profile generated by the chunks
    """
    
    def __init__(self,file_name):
        self.path=os.path.abspath(file_name).split("/")
        self.name, self.box = get_name(file_name)
        self.data=pd.read_csv(file_name,sep=" ",dtype=np.float64,skiprows=4,header=None).as_matrix()[:,2:]
        self.column_names=get_columns(file_name)
        
    
    def get_property(self,name):
        """
        function to get the specific property
        """
        index=parameter_finder(self.column_names,name)[0]
        prop=self.data(index)
        
        return prop

        

"""
*******************************************************************************
Main
*******************************************************************************
"""


parser = argparse.ArgumentParser(description='This script analyses the velocity profiles of the polymer',formatter_class=argparse.ArgumentDefaultsHelpFormatter)
parser.add_argument('file_name', metavar='InputFile',help='Input filename',nargs='+',type=lambda x: is_valid_file(parser, x))
parser.add_argument('-properties', metavar='properties',help='Properties to plot',nargs='+',type=str)
args = parser.parse_args()
files=args.file_name
properties=args.properties

#Initializing the class
profiles=build_data(files)


for parameter in properties:
    plot_property(parameter)






"""
*******************************************************************************
Plot
*******************************************************************************
"""





