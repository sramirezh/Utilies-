"""
This script analyzes chunk-averaged data generated by LAMMPS
The chunk files should be SPlitted before using Chunk_Splitter.sh
In order to perform the Concentration analysis, the chunk extensions, should be as follow:

.chunk for solute properties. 

It generates a file "Sconcentration.dat" that has the averages of all data.

"""

import numpy as np
from scipy.interpolate import splev,splrep,splint

#Reading the times to make it easier to read the file by chunks
Times=np.loadtxt("Times.dat",dtype=int)
x=np.size(Times)
print "\nRemember to define the surface shift and run only Chunk_Splitter!!!!\n"

#Getting the zshift
f=open("Zshift.dat")
xshift=np.float(f.readline())   #This is where the solid surface finishes. 
f.close()

#Getting the shape of the data array 
File_Name=str(int(Times[0]))+".chunk"
FirstChunk=np.loadtxt(File_Name,skiprows=1)
n,m=np.shape(FirstChunk) 

Concentration=np.zeros((n,2))


Concentration[:,0]=FirstChunk[:,1]-xshift 
"""
Computing the averages and other parameters
"""
BulkConcentration=[]
for k in xrange(x): #Runs over the sampled times.
    print k
   # print("Reading configuration %d of %d" %(k,x-1))
    File_Name=str(int(Times[k]))+".chunk"
    Chunk_Results=np.loadtxt(File_Name,skiprows=1)  
    for i in xrange(n):  
        Concentration[i,1]=Concentration[i,1]+Chunk_Results[i,4] #Just adding the density/mass#
        #Computing the bulk concentration as defined by Bocquet.
        if Concentration[i,0]>=15 and Concentration[i,0]<=25:
            BulkConcentration.append(Chunk_Results[i,4])

Concentration[:,1]=Concentration[:,1]/(k+1)



BulkC=np.average(BulkConcentration)
Average_c=np.average(Concentration[:,1])

"""
Solute absortion calculations
"""
#Integration limits as defined by Bocquet

xmin=0.0
xmax=8.0
def Integrate(x,y,xmin,xmax):
    """
    Integrate the data in x and y from xmin to xmax
    """
    MinIndex=np.min(np.where(x>=xmin))
    MaxIndex=np.max(np.where(x<=xmax))
    I=np.trapz(y[MinIndex:MaxIndex],x[MinIndex:MaxIndex])
    
    return I


Integrand=Concentration[:,1]/BulkC-1.0
                       
SolAbso=Integrate(Concentration[:,0],Integrand,xmin,xmax)


"""
Spline Calculations 
"""
tck=splrep(Concentration[:,0],Integrand)
tck0=splrep(Concentration[:,0],Concentration[:,1])
SplineX=np.linspace(0,8,400)
SplineY=splev(SplineX,tck)

Gamma=splint(0,8,tck) #Solute Absorption

#Generating Spline Concentration
TSplineX=np.linspace(0,25,1500)
TSplineY=splev(TSplineX,tck0)

print "The average concentration is %f" %(Average_c)
print "The bulk concentration is %f" %(BulkC)
print "The solute adsorption is %f" %SolAbso
print "The solute adsorption using splines is %f" %Gamma
                       
"""
Creating the output file
"""
np.savetxt("Concentration.dat",Concentration)
np.savetxt("Spline_Concentration.dat", np.transpose([TSplineX,TSplineY]))
np.savetxt("Integrand.dat",np.transpose([Concentration[:,0],Integrand]))
np.savetxt("Spline_Integrand.dat",np.transpose([SplineX,SplineY]))

print "Generated Concentration.dat Spline_Concentration.dat Integrand.dat Spline_Integrand.dat"
"""
Uncomment for testing
"""
 
#import matplotlib.pyplot as plt
#plt.figure(1)
#plt.plot(Concentration[:,0],Concentration[:,1],'*')
#
#x=np.linspace(min(Concentration[:,0]),max(Concentration[:,0]))
#y=np.zeros(len(x))
#y[:]=BulkC
#plt.plot(x,y)
#plt.plot(TSplineX,TSplineY)
#plt.xlim([0,25])
#
#
#
#plt.figure(2)
#
#plt.plot(Concentration[:,0],Integrand,'*')
#x=np.linspace(min(Concentration[:,0]),max(Concentration[:,0]))
#y=np.zeros(len(x))
#plt.plot(x,y)
#plt.plot(SplineX,SplineY)
#plt.xlim([0,8])


